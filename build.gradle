

plugins {
    id 'java'
}

group 'xin.nimil'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

ext{
    version = '1.1.0'
     groupName = 'xin.nimil11'
}

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

this.afterEvaluate {
    println '配置阶段执行完毕'
}

this.gradle.buildFinished {
    println '编译完成'
}
this.getProjects()

def getProjects(){
    println '------'
    println 'root project'
    println '------'

    this.getAllprojects().eachWithIndex{ Project entry, int i ->
        if(i == 0){
            println "Root project:'${entry.name}'"
        }else{
            println "-------project:'${entry.name}'"
        }

    }

}

project('app'){
    Project project ->
       println project.name
        println  '11111'
}
/**
dependencies{
    //可以添加fileTree文件
    compile fileTree()
    //添加jar包
    compile  jar

    //解决依赖冲突  解决jar包冲突
    compile(jar){
        excloud moudle:'...'
        excloud group:'xin.nimil'

        //传递依赖
        transitive false
    }

    //第三方库会打到最终的输出中
    compile 可以添加有源码的库工程

    //只在编译期使用当前库工程 而在运行期会提示找不到
    provided(jar)
}
**/
allprojects {
   group this.groupName
    version this.version
}

println project('app').group
println project('app').version

println getRootDir().absolutePath
println getProjectDir().absolutePath
println getBuildDir().absolutePath
/**
buildscript {
    ScriptHandler scriptHandler ->
        //配置我们工程的仓库地址
        scriptHandler.repositories {
            RepositoryHandler repositories->
                repositories.jcenter()
                repositories.mavenCentral()
                repositories.mavenLocal()
                repositories.maven {
                    name 'maven-aliyun'
                    url 'http://maven.aliyun.com/nexus/content/groups/public'
                    credentials{
                        username = ''
                        password = ''
                    }
                }


        }

        //w为gradle添加插件地址
        scriptHandler.dependencies {
            classpath 'url'
        }
}
 **/

task helloTsk{
    println 'hello task'
}

this.tasks.create(name:'hellotask2'){
    println 'hello task2'
}